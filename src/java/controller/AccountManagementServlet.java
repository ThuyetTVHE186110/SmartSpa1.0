package controller;import dal.AccountDAO;import java.io.IOException;import jakarta.servlet.ServletException;import jakarta.servlet.http.HttpServlet;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;import java.util.List;import model.Account;import java.sql.SQLException;/** * * @author PC */public class AccountManagementServlet extends HttpServlet {    @Override    protected void doGet(HttpServletRequest request, HttpServletResponse response)            throws ServletException, IOException {        HttpSession session = request.getSession(false);        if (session == null || session.getAttribute("account") == null) {            response.sendRedirect("adminLogin.jsp");            return;        }        Account account = (Account) session.getAttribute("account");        // Only role 1 (admin) can access account management        if (account.getRole() == 1) {            AccountDAO accountDAO = new AccountDAO();            // Pagination parameters            int page = 1;            int recordsPerPage = 5; // Display 5 accounts per page            if (request.getParameter("page") != null) {                page = Integer.parseInt(request.getParameter("page"));            }            // Get filter parameters for Status and Role            String statusFilter = request.getParameter("statusFilter");            String roleFilter = request.getParameter("roleFilter");            try {                // Reset to the first page when a filter is applied                if ((statusFilter != null && !statusFilter.equals("all")) || (roleFilter != null && !roleFilter.equals("all"))) {                    page = 1;                }                // Retrieve filtered accounts and calculate pagination                List<Account> allFilteredAccounts = accountDAO.getFilteredAccounts(statusFilter, roleFilter);                int totalRecords = allFilteredAccounts.size();                int totalPages = (int) Math.ceil((double) totalRecords / recordsPerPage);                // Get the sublist for the current page                int start = (page - 1) * recordsPerPage;                int end = Math.min(start + recordsPerPage, totalRecords);                List<Account> accounts = allFilteredAccounts.subList(start, end);                // Set attributes for JSP                request.setAttribute("accounts", accounts);                request.setAttribute("currentPage", page);                request.setAttribute("totalPages", totalPages);                request.setAttribute("statusFilter", statusFilter);                request.setAttribute("roleFilter", roleFilter);                // Forward to account management JSP                request.getRequestDispatcher("accountManagement.jsp").forward(request, response);            } catch (SQLException e) {                e.printStackTrace();                request.setAttribute("errorMessage", "An error occurred while retrieving accounts.");                request.getRequestDispatcher("error.jsp").forward(request, response);            }        } else {            // If the user does not have the required role, redirect to the error page            request.setAttribute("errorMessage", "You do not have the required permissions to access this page.");            request.getRequestDispatcher("roleError.jsp").forward(request, response);        }    }    @Override    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {        HttpSession session = request.getSession(false);        if (session == null || session.getAttribute("account") == null) {            response.sendRedirect("login");            return;        }        String action = request.getParameter("action");        AccountDAO accountDAO = new AccountDAO();        try {            if ("update".equals(action)) {                int accountId = Integer.parseInt(request.getParameter("id"));                String username = request.getParameter("username");                String newPassword = request.getParameter("newPassword");                String confirmPassword = request.getParameter("confirmPassword");                String status = request.getParameter("status");                int roleId = Integer.parseInt(request.getParameter("role"));                String personName = request.getParameter("name");                // Check if newPassword and confirmPassword match (only if newPassword is provided)                if (newPassword != null && !newPassword.isEmpty()) {                    if (!newPassword.equals(confirmPassword)) {                        request.setAttribute("errorMessage", "Passwords do not match.");                        request.getRequestDispatcher("accountManagement.jsp").forward(request, response);                        return;                    }                } else {                    // If newPassword is empty, retain the existing password                    newPassword = accountDAO.getCurrentPassword(accountId);                }                // Proceed with the update if passwords match                accountDAO.updateAccountDetails(accountId, username, newPassword, status, roleId, personName);                Account updatedAccount = accountDAO.getAccountById(accountId);                // Only replace the session's account if the logged-in user is editing their own account                Account currentSessionAccount = (Account) session.getAttribute("account");                if (currentSessionAccount.getId() == accountId) {                    session.setAttribute("account", updatedAccount);                    session.setAttribute("person", updatedAccount.getPersonInfo());                }                // Set success message                session.setAttribute("successMessage", "Account updated successfully.");            } else if ("add".equals(action)) {                // Add account logic                String username = request.getParameter("username");                String password = request.getParameter("password");                String confirmPassword = request.getParameter("confirmPassword");                int roleId = Integer.parseInt(request.getParameter("role"));                String personName = request.getParameter("name");                // Check if passwords match                if (!password.equals(confirmPassword)) {                    request.setAttribute("errorMessage", "Passwords do not match.");                    request.getRequestDispatcher("accountManagement.jsp").forward(request, response);                    return;                }                // Insert the new account into the database                accountDAO.addAccount(username, password, roleId, personName);                // Set success message                session.setAttribute("successMessage", "Account added successfully.");            }            // Retrieve the updated list of accounts            List<Account> accounts = accountDAO.getAllStaffAccounts();            request.setAttribute("accounts", accounts);            // Forward to account management JSP            request.getRequestDispatcher("accountManagement.jsp").forward(request, response);        } catch (NumberFormatException e) {            e.printStackTrace();            request.setAttribute("errorMessage", "Invalid input format. Please check the entered data.");            request.getRequestDispatcher("accountManagement.jsp").forward(request, response);        } catch (SQLException e) {            e.printStackTrace();            request.setAttribute("errorMessage", "An error occurred while processing the account. Please try again.");            request.getRequestDispatcher("accountManagement.jsp").forward(request, response);        }    }}